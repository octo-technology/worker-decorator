apply plugin: "kotlin"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"
apply plugin: "org.jetbrains.dokka"

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dependencies {
    compile project(":workerdecorator")
    compile project(":kotlinelements")

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion" // Force transitive kotlinpoet version

    compile "com.squareup:javapoet:1.11.1"
    compile ("com.squareup:kotlinpoet:0.7.0") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre7'
    }

    testCompile "junit:junit:4.12"
    testCompile "org.assertj:assertj-core:3.10.0"
    testCompile "org.mockito:mockito-core:2.18.3"
    testCompile "com.nhaarman:mockito-kotlin-kt1.1:1.5.0"
    testCompile "com.google.testing.compile:compile-testing:0.15"
}


task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


publishing {
    publications {
        workerDecoratorProcessor(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom.withXml {
                asNode().with {
                    appendNode("description", "An annotation processor generating Kotlin decorations for supplied interfaces.")
                    appendNode("licenses").with {
                        appendNode("license").with {
                            appendNode("name", "Apache License, Version 2.0")
                            appendNode("url", "https://www.apache.org/licenses/LICENSE-2.0.txt")
                        }
                    }
                    appendNode("organization").with {
                        appendNode("name", "OCTO Technology â€“ Mobile Squad")
                        appendNode("url", "https://www.octo.com")
                    }
                }
            }
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    publications = ["workerDecoratorProcessor"]
    pkg {
        repo = bintrayRepository
        name = project.name
        userOrg = "octomob"
        licenses = ["Apache-2.0"]
        vcsUrl = "git@gitlab.octo.com:team-mob/worker-decorator.git"
        version {
            name = project.version
        }
    }
    publish = true
}